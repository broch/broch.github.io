<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on broch.tech</title><link>https://broch.tech/posts/</link><description>Recent content in Blog on broch.tech</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 25 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://broch.tech/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Flexible Tracing with Rust and OpenTelemetry OTLP</title><link>https://broch.tech/posts/rust-tracing-opentelemetry/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate><guid>https://broch.tech/posts/rust-tracing-opentelemetry/</guid><description>If you have been using log files all your life, the telemetry ecosytem can be a bit daunting for a newcomer. And if you&amp;rsquo;ve just discovered Rust&amp;rsquo;s tracing framework, it&amp;rsquo;s not immediately clear where to look beyond the basic examples. There are a lot of crates and APIs to get your head round and a lot of new terminology. This article isn&amp;rsquo;t intended to be a complete tutorial but will explain how to set up a configuration which works with multiple systems and hopefully provide some insight into how things fit together.</description></item><item><title>Checking Password Strength in Elm, Part 2: Have I Been Pwned API</title><link>https://broch.tech/posts/elm-have-i-been-pwned/</link><pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate><guid>https://broch.tech/posts/elm-have-i-been-pwned/</guid><description>In the Part 1, we used the Javascript library Zxcvn to check the strength of a password locally. Now we&amp;rsquo;ll extend the code to check the chosen password against the huge database maintained by Have I been pwned?. The code for this part is similar, but instead of decoding the result of a call to Javascript to obtain our data, we make an HTTP request and decode the response.
The full code for both parts can be found on github.</description></item><item><title>Checking Password Strength in Elm, Part 1: Zxcvbn</title><link>https://broch.tech/posts/elm-zxcvbn/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><guid>https://broch.tech/posts/elm-zxcvbn/</guid><description>As part of a recent Elm project, I wrote some front-end user registration code which required that new users choose a password. I used the zxcvbn library to measure password strength and this seems like a good, non-trivial example to show how to call Javascript from Elm. In Part 2, we&amp;rsquo;ll look at how to add extra checks by calling the Have I Been Pwned passwords API which maintains a database of half a billion compromised password hashes.</description></item><item><title>Double-Slit Diffraction in Elm</title><link>https://broch.tech/posts/double-slits-elm/</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>https://broch.tech/posts/double-slits-elm/</guid><description>I&amp;rsquo;ve been meaning to try Elm for some time and finally made the effort to write some code. It&amp;rsquo;s a demo of the double-slits experiment. I already had some Java code which I wrote ages ago, but I&amp;rsquo;ve never got round to converting it to Javascript 1. Elm seems like a nice alternative so I decided to give it a try.
Number of slits 1 2 3 4 5 6 The app shows the light source, slits and the screen with an intensity graph of the diffraction pattern.</description></item><item><title>Linux Setup with XMonad</title><link>https://broch.tech/posts/linux-install/</link><pubDate>Sat, 19 Nov 2016 00:00:00 +0000</pubDate><guid>https://broch.tech/posts/linux-install/</guid><description>Earlier this year, after many years of using OSX, I decided to switch to using Linux for my desktop. Most of the development tools I use work better on Linux &amp;ndash; I mostly work directly with plain-text format files and I use the terminal a lot. I also wanted to use a tiling window manager with a minimal user interface. The changes Apple have been making to their machines and OS over the past few years have been irrelevant to my needs at best, and in some cases are downright annoying.</description></item><item><title>OAuth2 and OpenID Connect in Haskell</title><link>https://broch.tech/posts/oauth2-openid-connect-haskell/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://broch.tech/posts/oauth2-openid-connect-haskell/</guid><description>I&amp;rsquo;ve been working for a while on an implementation of the OpenID Connect specification. Since it was something I already knew quite a bit about from my previous job, it seemed like a good idea for a &amp;ldquo;real-world&amp;rdquo; Haskell project. The result is a project called &amp;ldquo;Broch&amp;rdquo; 1, which is an OpenID Connect identity provider. Features include
OAuth2 flows Authorization endpoint Token endpoint OpenID Connect basic flows OpenID Connect hybrid flows OpenID Connect Discovery Support for signed and encrypted JWTs 2 Client Registration Client authentication Basic authentication with client secret JWT Bearer authentication ID Tokens (signed and/or encrypted) Pairwise subject identifiers Server key management and rotation 3 SQLite back end PostgreSQL 9.</description></item><item><title>Build Your Own Haskell Web Framework on WAI</title><link>https://broch.tech/posts/build-your-own-wai-framework/</link><pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate><guid>https://broch.tech/posts/build-your-own-wai-framework/</guid><description>This article shows how you can build on top of the basic request/response handling functionality provided by WAI and the Warp server, to support some of the requirements you might have in a typical web application. The content is mostly gleaned from my research into the code of several WAI-based web frameworks to try to understand how they work. Building a web application was one of the things I tackled when I didn&amp;rsquo;t really know Haskell well enough, so hopefully this will be useful if you&amp;rsquo;re at a similar stage and would like to understand what&amp;rsquo;s going on in a bit more depth.</description></item></channel></rss>